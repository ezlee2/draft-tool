<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <title></title>
  <meta name="Generator" content="Cocoa HTML Writer">
  <meta name="CocoaVersion" content="2575.7">
  <style type="text/css">
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica; min-height: 14.0px}
  </style>
</head>
<body>
<p class="p1">&lt;!DOCTYPE html&gt;</p>
<p class="p1">&lt;html lang="en"&gt;</p>
<p class="p1">&lt;head&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;meta charset="UTF-8"&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;title&gt;FOF Rookie Draft Advisor&lt;/title&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;style&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>body { font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; background-color: #f5f5f5; padding: 20px; }</p>
<p class="p1"><span class="Apple-converted-space">        </span>.container { max-width: 1200px; margin: auto; background: #fff; padding: 25px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }</p>
<p class="p1"><span class="Apple-converted-space">        </span>h2, p { text-align: center; }</p>
<p class="p1"><span class="Apple-converted-space">        </span>.upload-area { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px; }</p>
<p class="p1"><span class="Apple-converted-space">        </span>.file-label { border: 2px dashed #ccc; border-radius: 6px; padding: 20px; text-align: center; cursor: pointer; transition: border-color 0.3s; }</p>
<p class="p1"><span class="Apple-converted-space">        </span>.file-label:hover { border-color: #007bff; }</p>
<p class="p1"><span class="Apple-converted-space">        </span>.file-label span { font-weight: bold; color: #555; }</p>
<p class="p1"><span class="Apple-converted-space">        </span>input[type="file"] { display: none; }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#process-btn { width: 100%; padding: 15px; background: #28a745; color: white; border: none; border-radius: 6px; font-size: 18px; font-weight: bold; cursor: pointer; }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#results-table { width: 100%; border-collapse: collapse; margin-top: 30px; }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#results-table th, #results-table td { border: 1px solid #ddd; padding: 10px; text-align: left; }</p>
<p class="p1"><span class="Apple-converted-space">        </span>#results-table thead { background: #007bff; color: white; }</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;/style&gt;</p>
<p class="p1">&lt;/head&gt;</p>
<p class="p1">&lt;body&gt;</p>
<p class="p2"><br></p>
<p class="p1">&lt;div class="container"&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;h2&gt;Rookie Draft Advisor&lt;/h2&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;p&gt;Upload `rookies.csv` and `draft_personal.csv` to rank QB prospects.&lt;/p&gt;</p>
<p class="p2"><span class="Apple-converted-space">    </span></p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;div class="upload-area"&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;label for="rookies-file" class="file-label"&gt;&lt;span id="rookies-file-name"&gt;1. Upload "rookies.csv"&lt;/span&gt;&lt;/label&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;input type="file" id="rookies-file"&gt;</p>
<p class="p2"><span class="Apple-converted-space">        </span></p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;label for="personal-file" class="file-label"&gt;&lt;span id="personal-file-name"&gt;2. Upload "draft_personal.csv"&lt;/span&gt;&lt;/label&gt;</p>
<p class="p1"><span class="Apple-converted-space">        </span>&lt;input type="file" id="personal-file"&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;/div&gt;</p>
<p class="p2"><span class="Apple-converted-space">    </span></p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;button id="process-btn"&gt;Analyze Prospects&lt;/button&gt;</p>
<p class="p2"><span class="Apple-converted-space">    </span></p>
<p class="p1"><span class="Apple-converted-space">    </span>&lt;div id="results-container"&gt;&lt;/div&gt;</p>
<p class="p1">&lt;/div&gt;</p>
<p class="p2"><br></p>
<p class="p1">&lt;script&gt;</p>
<p class="p1"><span class="Apple-converted-space">    </span>document.addEventListener('DOMContentLoaded', () =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">        </span>const rookiesFileEl = document.getElementById('rookies-file');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const personalFileEl = document.getElementById('personal-file');</p>
<p class="p1"><span class="Apple-converted-space">        </span>const processBtnEl = document.getElementById('process-btn');</p>
<p class="p2"><span class="Apple-converted-space">        </span></p>
<p class="p1"><span class="Apple-converted-space">        </span>rookiesFileEl.addEventListener('change', () =&gt; document.getElementById('rookies-file-name').textContent = rookiesFileEl.files[0]?.name || '1. Upload "rookies.csv"');</p>
<p class="p1"><span class="Apple-converted-space">        </span>personalFileEl.addEventListener('change', () =&gt; document.getElementById('personal-file-name').textContent = personalFileEl.files[0]?.name || '2. Upload "draft_personal.csv"');</p>
<p class="p1"><span class="Apple-converted-space">        </span>processBtnEl.addEventListener('click', analyzeFiles);</p>
<p class="p1"><span class="Apple-converted-space">    </span>});</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">    </span>async function analyzeFiles() {</p>
<p class="p1"><span class="Apple-converted-space">        </span>try {</p>
<p class="p1"><span class="Apple-converted-space">            </span>const rookiesFile = document.getElementById('rookies-file').files[0];</p>
<p class="p1"><span class="Apple-converted-space">            </span>const personalFile = document.getElementById('personal-file').files[0];</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (!rookiesFile || !personalFile) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert("Please select both CSV files.");</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>const readFile = file =&gt; new Promise((resolve, reject) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                </span>const reader = new FileReader();</p>
<p class="p1"><span class="Apple-converted-space">                </span>reader.onload = () =&gt; resolve(reader.result);</p>
<p class="p1"><span class="Apple-converted-space">                </span>reader.onerror = () =&gt; reject(reader.error);</p>
<p class="p1"><span class="Apple-converted-space">                </span>reader.readAsText(file);</p>
<p class="p1"><span class="Apple-converted-space">            </span>});</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>const [rookiesText, personalText] = await Promise.all([readFile(rookiesFile), readFile(personalFile)]);</p>
<p class="p2"><span class="Apple-converted-space">            </span></p>
<p class="p1"><span class="Apple-converted-space">            </span>const parse = text =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                </span>const lines = text.split(/\r?\n/).filter(Boolean);</p>
<p class="p1"><span class="Apple-converted-space">                </span>if (lines.length &lt; 1) return [];</p>
<p class="p1"><span class="Apple-converted-space">                </span>const header = lines.shift().split(',').map(h =&gt; h.trim().replace(/"/g, ''));</p>
<p class="p1"><span class="Apple-converted-space">                </span>return lines.map(line =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                    </span>const values = line.split(',');</p>
<p class="p1"><span class="Apple-converted-space">                    </span>return header.reduce((obj, h, i) =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                        </span>obj[h] = values[i]?.trim().replace(/"/g, '') || '';</p>
<p class="p1"><span class="Apple-converted-space">                        </span>return obj;</p>
<p class="p1"><span class="Apple-converted-space">                    </span>}, {});</p>
<p class="p1"><span class="Apple-converted-space">                </span>});</p>
<p class="p1"><span class="Apple-converted-space">            </span>};</p>
<p class="p2"><span class="Apple-converted-space">            </span></p>
<p class="p1"><span class="Apple-converted-space">            </span>const rookiesData = parse(rookiesText);</p>
<p class="p1"><span class="Apple-converted-space">            </span>const personalData = parse(personalText);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>if (rookiesData.length === 0) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert("Could not read data from rookies.csv. Please check the file.");</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>const requiredHeaders = ['Player_ID', 'FirstName', 'LastName', 'Position', 'Overall', 'Accuracy', 'Poise', 'ScreenPasses', 'ShortPasses', 'MediumPasses', 'LongPasses', 'DeepPasses', 'ThirdDownPassing', 'SenseRush', 'ReadDefense', 'TwoMinuteOffense'];</p>
<p class="p1"><span class="Apple-converted-space">            </span>if (!requiredHeaders.every(h =&gt; Object.keys(rookiesData[0]).includes(h))) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert("rookies.csv is missing required columns. Please check the file headers match: FirstName, ScreenPasses, etc.");</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>const personalMap = new Map(personalData.map(p =&gt; [p.Player_ID, p]));</p>
<p class="p1"><span class="Apple-converted-space">            </span>const qbProspects = rookiesData.filter(p =&gt; p.Position === 'QB').map(player =&gt; {</p>
<p class="p1"><span class="Apple-converted-space">                </span>const pFloat = val =&gt; parseFloat(val) || 0;</p>
<p class="p1"><span class="Apple-converted-space">                </span>const personal = personalMap.get(player.Player_ID) || {};</p>
<p class="p2"><span class="Apple-converted-space">                </span></p>
<p class="p1"><span class="Apple-converted-space">                </span>const cur = pFloat(player.Overall), screen = pFloat(player.ScreenPasses), short = pFloat(player.ShortPasses), med = pFloat(player.MediumPasses), long = pFloat(player.LongPasses), deep = pFloat(player.DeepPasses), thirdDown = pFloat(player.ThirdDownPassing), acc = pFloat(player.Accuracy), senseRush = pFloat(player.SenseRush), readD = pFloat(player.ReadDefense), twoMin = pFloat(player.TwoMinuteOffense);</p>
<p class="p1"><span class="Apple-converted-space">                </span>const avoidIntNumerator = (cur * 1) - (screen * 0.082) - (short * 0.078) - (med * 0.091) - (long * 0.091) - (deep * 0.062) - (thirdDown * 0.099) - (acc * 0.095) - (senseRush * 0.033) - (readD * 0.045) - (twoMin * 0.029);</p>
<p class="p1"><span class="Apple-converted-space">                </span>const calculatedAvoidInt = avoidIntNumerator / 0.296;</p>
<p class="p1"><span class="Apple-converted-space">                </span>const poise = pFloat(player.Poise), workEthic = pFloat(personal.WE), intelligence = pFloat(personal.INT);</p>
<p class="p2"><span class="Apple-converted-space">                </span></p>
<p class="p1"><span class="Apple-converted-space">                </span>const coreSkillsValue = (calculatedAvoidInt * 0.5) + (acc * 0.25) + (poise * 0.25);</p>
<p class="p1"><span class="Apple-converted-space">                </span>const coreSkillsComponent = coreSkillsValue * 0.60;</p>
<p class="p1"><span class="Apple-converted-space">                </span>const athleticComponent = 50 * 0.30;</p>
<p class="p1"><span class="Apple-converted-space">                </span>const personalityValue = (workEthic + intelligence) / 2;</p>
<p class="p1"><span class="Apple-converted-space">                </span>const personalityComponent = personalityValue * 0.10;</p>
<p class="p1"><span class="Apple-converted-space">                </span>const totalDraftScore = coreSkillsComponent + athleticComponent + personalityComponent;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">                </span>return { Name: `${player.FirstName} ${player.LastName}`, TotalDraftScore: totalDraftScore.toFixed(1), CoreSkills: coreSkillsValue.toFixed(1), AvoidINT: calculatedAvoidInt.toFixed(1) };</p>
<p class="p1"><span class="Apple-converted-space">            </span>}).sort((a, b) =&gt; b.TotalDraftScore - a.TotalDraftScore);</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>if (qbProspects.length === 0) {</p>
<p class="p1"><span class="Apple-converted-space">                </span>alert("No QBs found in the uploaded files.");</p>
<p class="p1"><span class="Apple-converted-space">                </span>return;</p>
<p class="p1"><span class="Apple-converted-space">            </span>}</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">            </span>const headers = Object.keys(qbProspects[0]);</p>
<p class="p1"><span class="Apple-converted-space">            </span>let tableHTML = '&lt;table id="results-table"&gt;&lt;thead&gt;&lt;tr&gt;' + headers.map(h =&gt; `&lt;th&gt;${h}&lt;/th&gt;`).join('') + '&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;';</p>
<p class="p1"><span class="Apple-converted-space">            </span>qbProspects.forEach(p =&gt; { tableHTML += '&lt;tr&gt;' + headers.map(h =&gt; `&lt;td&gt;${p[h]}&lt;/td&gt;`).join('') + '&lt;/tr&gt;'; });</p>
<p class="p1"><span class="Apple-converted-space">            </span>tableHTML += '&lt;/tbody&gt;&lt;/table&gt;';</p>
<p class="p1"><span class="Apple-converted-space">            </span>document.getElementById('results-container').innerHTML = tableHTML;</p>
<p class="p2"><br></p>
<p class="p1"><span class="Apple-converted-space">        </span>} catch (error) {</p>
<p class="p1"><span class="Apple-converted-space">            </span>alert("A critical error occurred: " + error.message);</p>
<p class="p1"><span class="Apple-converted-space">        </span>}</p>
<p class="p1"><span class="Apple-converted-space">    </span>}</p>
<p class="p1">&lt;/script&gt;</p>
<p class="p2"><br></p>
<p class="p1">&lt;/body&gt;</p>
<p class="p1">&lt;/html&gt;</p>
</body>
</html>
